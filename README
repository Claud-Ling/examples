这里的示例了如何将自己的工程项目添加到build system中, 由build system进行统一的管理,编译,打包


1.build_system运行时首先扫描SOURCE_CODE_PATH目录,当发现cambricon_build.mk后,则将该项目纳入自己的管理系统
cambricon_build.mk告诉build system该项目如何配置,编译,安装等重要信息

2. 同一份项目代码可以同时被编译/交叉编译, 可以令代码的管理变得简洁
   一个项目可以被同时包含多种模块:
 - ARM userspace application
 - ARM kernel module
 - X86 userspace application
 - X86 kernel module

3.项目间存在依赖关系时,典型的场景如下:
  - 项目A输出动态链接库(*.so)及API接口声明(*.h)
  - 项目B在编译时需要引用A输出的(.h)文件, 在链接时需要与(.so)链接
  - 项目B在运行时需要在系统库路径中找到A的动态链接库(.so)
  build system能优雅的处理两者(甚至多项目间)的依赖关系, 为项目开发提供了一个完备的基础环境

4.以下为示例
example1    -   基本的ARM userspace application
example2    -   基本的X86 userspace application
example3    -   项目分别编译成ARM和x86上运行的userspace application
example4    -   项目分别编译成ARM和x86上运行的kernel module
example5    -   项目包含了kernel driver和userspace部分,分别编译成ARM和x86两个版本
